require 'dicom'
include DICOM

n = DClient.new("192.168.195.3", 2350, { host_ae: "SK" })



n.find_studies({"0008,0050" => "99595901"})



n.find_series({"0008,0050" => "66168505", "0008,0060" => "SR"})



n.find_images({
  "0020,000D"=>"1.2.840.113817.886.602030026.0.9974758.995959011",
  "0020,000E"=>"1.2.840.113619.2.116.4609424.1402531892.0.95"
})

n.get_image('./', {
  "0008,0005"=>"ISO_IR 192",
  "0008,0016"=>"1.2.840.10008.5.1.4.1.1.88.33",
  "0008,0018"=>"1.2.840.113619.2.116.4609424.1402531892.0.151",
  "0008,0020"=>"20140612", "0008,0030"=>"081130.000", "0008,0050"=>"99595901",
  "0008,0052"=>"IMAGE", "0008,0054"=>"SK", "0008,0056"=>"ONLINE",
  "0008,0060"=>"SR", "0008,0061"=>"SR\\US", "0008,0070"=>"GE Medical Systems",
  "0008,0090"=>"1245", "0008,1030"=>"Sono, Upper abdomen", "0008,103E"=>"",
  "0008,1040"=>"RAD", "0008,1080"=>"",
  "0010,0010"=>"\xE5\x90\xB3\xE9\x8D\xBE\xE5\x86\x89\xE6\x98\xAD",
  "0010,0020"=>"9974758", "0010,0021"=>"vghks", "0010,0030"=>"19340317",
  "0010,0032"=>"000000.000", "0010,0040"=>"F", "0010,1000"=>"S202242166",
  "0010,1010"=>"080Y", "0018,0015"=>"Sono, Upper abdomen",
  "0020,000D"=>"1.2.840.113817.886.602030026.0.9974758.995959011",
  "0020,000E"=>"1.2.840.113619.2.116.4609424.1402531892.0.95", "0020,0011"=>"1",
  "0020,0013"=>"1", "0032,000A"=>"",
  "0032,1033"=>"EMED\xE6\x80\xA5\xE8\xA8\xBA\xE9\x86\xAB\xE5\xAD\xB8",
  "0032,1060"=>"", "0038,001E"=>"022", "0038,0400"=>"MER", "0088,0130"=>"",
  "0088,0140"=>""
})


n.move_image('TSAIID_DICOM', {
  "0008,0018"=>"1.2.840.113619.2.116.4609424.1402531892.0.151",
  "0008,0052"=>"IMAGE",
  "0020,000D"=>"1.2.840.113817.886.602030026.0.9974758.995959011",
  "0020,000E"=>"1.2.840.113619.2.116.4609424.1402531892.0.95",
})

wado_url = "http://192.168.195.3:9090/dcm4jboss-wado/?&requestType=WADO&studyUID=1.2.840.113817.886.602030026.0.14112960.66168505&seriesUID=1.2.840.113619.2.116.5844212.1402877731.0.1348&objectUID=1.2.840.113619.2.116.5844212.1402877731.0.1347"

  begin
    open(wado_url) {|f|
      dcm = f.read
    }
  rescue OpenURI::HTTPError => error
    response = error.io
    return response.status, nil
  end

